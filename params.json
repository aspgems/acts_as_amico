{"name":"Acts as amico","body":"# acts_as_amico\r\n\r\nActiveModel injectable relationships (e.g. friendships) backed by Redis using the [Amico](https://github.com/agoragames/amico) gem\r\n\r\n## Installation\r\n\r\n`gem install acts_as_amico`\r\n\r\nor in your `Gemfile`\r\n\r\n```ruby\r\ngem 'acts_as_amico'\r\n```\r\n\r\nMake sure your redis server is running! Redis configuration is outside the scope of this README, but \r\ncheck out the Redis documentation, http://redis.io/documentation.\r\n  \r\n### Basic Usage\r\n\r\n```ruby\r\nrequire 'acts_as_amico'\r\n => true\r\n\r\n# Configure the Amico sub-framework\r\nAmico.configure do |configuration|\r\n  configuration.redis = Redis.new\r\n  configuration.namespace = 'amico'\r\n  configuration.following_key = 'following'\r\n  configuration.followers_key = 'followers'\r\n  configuration.blocked_key = 'blocked'\r\n  configuration.reciprocated_key = 'reciprocated'\r\n  configuration.pending_key = 'pending'\r\n  configuration.default_scope_key = 'default'\r\n  configuration.pending_follow = false\r\n  configuration.page_size = 25\r\nend\r\n\r\nclass User < ActiveRecord::Base\r\n acts_as_amico\r\nend\r\n\r\nusera = User.create\r\nuserb = user.create\r\n\r\nusera.follow! userb\r\n=> nil\r\n\r\nusera.following? userb\r\n => true\r\n\r\nuserb.following? usera\r\n => false\r\n\r\nuserb.follow! usera\r\n => [1, 1]\r\n\r\nuserb.following? usera\r\n => true\r\n\r\nusera.following_count\r\n => 1\r\n\r\nusera.followers_count\r\n => 1\r\n\r\nuserb.unfollow! usera\r\n => [1, 1, 1, 1, 0]\r\n\r\nuserb.following_count\r\n => 0\r\n\r\nusera.following_count\r\n => 1\r\n\r\nusera.follower? userb\r\n => false\r\n\r\nputs userb.id\r\n => 11\r\n\r\nusera.following\r\n => [\"11\"]\r\n\r\nusera.block! userb\r\n => [1, 0, 1, 0, 0, 0, 0, 1]\r\n\r\nuserb.following? usera\r\n => false\r\n\r\nusera.blocked? userb\r\n => true\r\n\r\nusera.unblock! userb\r\n => true\r\n\r\nusera.blocked? userb\r\n => false\r\n\r\nuserb.follow! usera\r\n => nil\r\n\r\nusera.follow! userb\r\n => [1, 1]\r\n\r\nusera.reciprocated? userb\r\n => true\r\n\r\nputs userb.id\r\n => 11\r\n\r\nusera.reciprocated\r\n => [\"11\"]\r\n```\r\n\r\n### Non-ID Keys\r\nYou can also use non-id keys\r\n\r\n```ruby\r\nclass Admin < ActiveRecord::Base\r\n  acts_as_amico :amico_key => :name\r\n  validates_uniqueness_of :name  # -> do this or be sorry\r\n  validates_presence_of :name # -> this too, you've been warned\r\nend\r\n\r\nusera = User.create\r\n\r\nputs usera.id\r\n => 18\r\n\r\nadmin = Admin.create :name => \"frank\"\r\n\r\nusera.follow! admin\r\n => nil\r\n\r\nadmin.follow! usera\r\n => [1, 1]\r\n\r\nadmin.followers\r\n => [\"18\"]\r\n\r\nusera.followers\r\n => [\"frank\"]\r\n```\r\n\r\n### ActiveResource Models\r\n\r\nYou can use active resource models as well\r\n\r\n```ruby\r\nclass RestObject < ActiveResource::Base\r\n  self.site = 'http://mettadore.com/junk'\r\n  acts_as_amico :amico_key => :title\r\nend\r\n\r\nusera = User.create\r\n\r\nrest_object = RestObject.find(123)\r\n\r\nrest_object.title\r\n => \"Bread and Circus\"\r\n\r\nusera.follow! rest_object\r\n\r\nusera.following? rest_object\r\n => true\r\n\r\nusera.following\r\n => [\"Bread and Circus\"]\r\n```\r\n\r\nOne note about ActiveResource: You have to be careful what you use as the :amico_key. For\r\ninstance, using ```acts_as_amico :amico_key => :name``` is an exceptionally bad idea because\r\nthis will cause a ```SystemStackError: stack level too deep``` because acts_as_amico uses\r\nthe Rails::Object#send method to get the key, and for some reason if the send method even\r\n*touches* the string/symbol \"name\" we get cascaded through the object graph.\r\n\r\n## Documentation\r\n\r\nActs_as_amico is feature complete with the amico gem. [The Amico API usage page](https://github.com/mettadore/amico/blob/master/API.md)\r\nshows a more complete suite of methods. The source for the [Amico relationships module](https://github.com/agoragames/amico/blob/master/lib/amico/relationships.rb)\r\nis well-documented. There are some simple examples in the method documentation. You can also refer to the\r\n[Amico online documentation](http://rubydoc.info/github/agoragames/amico/master/frames).\r\n\r\n## Future Plans\r\n\r\n * Clean up the ActiveResource integration and figure out why :name is so dangerous.\r\n * Better document the code\r\n \r\n## Contributing to acts_as_amico\r\n \r\n* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet\r\n* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it\r\n* Fork the project\r\n* Start a feature/bugfix branch\r\n* Commit and push until you are happy with your contribution\r\n* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.\r\n* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.\r\n\r\n## Copyright\r\n\r\nCopyright (c) John Metta. See LICENSE.txt for further details.\r\n","tagline":"ActiveRecord injectable version of the Redis-backed friendship system","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}